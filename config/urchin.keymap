/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 */

#include "keymap_italian.h"
#include <dt-bindings/zmk/mouse.h>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

/* Layers */
#define DEFAULT 0
#define NUM 1
#define SYM 2
#define SETTING 3
#define ALPHA1 4
#define ALPHA2 5

/ {
    combos {
        // 0  1  2  3  4  ** 5  6  7  8  9
        // 10 11 12 13 14 ** 15 16 17 18 19
        // 20 21 22 23 24 ** 25 26 27 28 29
        //          30 31 ** 32 33

        compatible = "zmk,combos";
        combo_esc {
            timeout-ms = <50>;
            key-positions = <16 17>;
            bindings = <&kp ESC>;
        };
        combo_sl_0 {
            timeout-ms = <50>;
            key-positions = <13 14>;
            bindings = <&to DEFAULT>;
        };
        combo_sl_1 {
            timeout-ms = <50>;
            key-positions = <15 16>;
            bindings = <&to NUM>;
        };
        combo_repeat_key {
            timeout-ms = <50>;
            key-positions = <12 13>;
            bindings = <&key_repeat>;
        };
        combo_nuke_line {
            timeout-ms = <50>;
            key-positions = <25 26>;
            bindings = <&kp LG(BSPC)>;
        };
        combo_nuke_word {
            timeout-ms = <50>;
            key-positions = <26 27>;
            bindings = <&kp LA(BSPC)>;
        };
    };

    behaviors {
        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <250>;
            quick-tap-ms = <150>;
            require-prior-idle-ms = <100>;
            bindings = <&kp>, <&kp>;
        };

        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <250>;
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };

        cut: tap_dance_0 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp X>, <&kp LG(X)>;
        };

        copy: tap_dance_1 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp C>, <&kp LG(C)>;
        };

        paste: tap_dance_2 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp V>, <&kp LG(V)>;
        };

        dt1: tap_dance_3 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp N1>, <&kp LC(N1)>;
        };

        dt2: tap_dance_4 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp N2>, <&kp LC(N2)>;
        };

        dt3: tap_dance_5 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp N3>, <&kp LC(N3)>;
        };

        dt4: tap_dance_6 {
            compatible = "zmk,behavior-tap-dance";
            #binding-cells = <0>;
            tapping-term-ms = <250>;
            bindings = <&kp N4>, <&kp LC(N4)>;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        tri_layer {
            if-layers = <1 2>;
            then-layer = <3>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&mt LS(LGUI) Q    &kp W          &kp E          &kp R            &kp T        &kp Y       &kp U            &kp I          &kp O          &kp P
&bhm LCTRL A      &bhm LALT S    &bhm LGUI D    &bhm LSHIFT F    &kp G        &kp H       &bhm RSHIFT J    &bhm RGUI K    &bhm RALT L    &kp SEMI
&bhm LSHIFT Z     &cut           &copy          &paste           &kp B        &kp N       &kp M            &kp COMMA      &kp DOT        &bhm RSHIFT FSLH
                                                &lt NUM ESC        &kp SPACE    &kp BSPC    &lt SYM ENTER
            >;
        };

        right_layer {
            bindings = <
&dt1             &dt2             &dt3            &dt4            &kp N5        &kp N6      &kp N7      &kp N8      &kp N9      &kp N0
&kp LCTRL       &kp LALT        &kp LGUI        &kp LSHIFT        &trans        &kp LARW    &kp DARW    &kp UARW    &kp RARW    &kp TAB
&mkp MB5         &mkp MB4         &mkp MB3        &mkp MB2        &mkp MB1      &trans      &trans      &trans      &trans      &kp LALT
                                                  &trans          &trans        &trans      &trans
            >;
        };

        left_layer {
            bindings = <
&kp EXCL     &kp AT       &kp HASH    &kp DLLR    &kp PRCNT      &kp CARET    &kp AMPS     &kp ASTRK    &kp LPAR    &kp RPAR
&kp TILDE    &kp GRAVE    &kp SQT     &kp DQT     &caps_word     &kp MINUS    &kp EQUAL    &kp LBKT     &kp RBKT    &kp PIPE
&kp ESC      &kp ENTER    &trans      &trans      &key_repeat    &kp UNDER    &kp PLUS     &kp LBRC     &kp RBRC    &kp BACKSLASH
                                      &trans      &trans         &trans       &trans
            >;
        };

        tri_layer {
            bindings = <
&sys_reset         &bt BT_CLR    &bt BT_SEL 0        &bt BT_SEL 1  &bt BT_SEL 2    &to ALPHA1    &trans    &trans    &bootloader    &sys_reset
&kp C_BRI_DEC       &kp C_BRI_INC    &kp C_VOL_DN    &kp C_VOL_UP    &kp C_MUTE    &trans    &trans    &trans    &trans     &trans
&trans         &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans    &trans
                                   &trans        &trans          &trans    &trans
            >;
        };

        alpha_1 {
            bindings = <
&kp ESC        &none        &none        &none        &none        &none        &none        &none        &none        &none
&key_repeat    &kp L     &kp G     &kp D      &none            &none    &kp H     &kp U     &kp O     &kp SEMI
&bhm LSHIFT I    &kp S      &kp R    &kp T    &none          &none    &kp N      &kp E    &kp A      &bhm RSHIFT C
                             &mo ALPHA2     &kp SPACE                 &kp BSPC    &kp ENTER
            >;
        };

        alpha_2 {
            bindings = <
&none        &none        &none        &none        &none            &to DEFAULT     &none        &none        &none        &none
&none        &kp V        &kp W        &kp M        &none            &none    &kp F        &kp SQT      &kp Z        &trans
&bhm LSHIFT Q    &kp J        &kp P        &kp K    &none            &none    &kp B        &kp DOT      &kp X       &bhm RSHIFT Y
                                &trans    &trans   &trans      &trans
            >;
        };
    };
};
